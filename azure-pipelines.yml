# .NET Core Function App to Windows on Azure
# Build a .NET Core function app and deploy it to Azure as a Windows function App.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core

trigger: 
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md

pr: none

variables:
  # Azure Resource Manager connection created during pipeline creation
  azureSubscription: 'e0fbc786-67e5-421f-8d33-19cd6b7e246c'

  # Function app name
  functionAppName: 'AzureFunction-Pipelines'

  # Agent VM image name
  vmImageName: 'vs2017-win2016'

  # Working Directory
  workingDirectory: '$(System.DefaultWorkingDirectory)/AzureFunction2'

stages:
- stage: Build
  displayName: Build stage

  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)

    steps:
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: |
          $(workingDirectory)/*.csproj
        arguments: --output $(System.DefaultWorkingDirectory)/publish_output --configuration Release

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/publish_output'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()

  jobs:
    - deployment: Deploy
      displayName: Deploy
      environment: 'development'
      pool:
        vmImage: $(vmImageName)

      strategy:
        runOnce:
          deploy:

            steps:
            - task: AzureFunctionApp@1
              inputs:
                azureSubscription: '$(azureSubscription)'
                appType: 'functionApp'
                appName: $(functionAppName)
                deployToSlotOrASE: true
                resourceGroupName: 'AzureFunction2'
                slotName: 'stage'
                package: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
                deploymentMethod: 'auto'

- stage: Approve_and_Swap
  displayName: Approve and Swap Stage
  dependsOn: Deploy
  condition: succeeded()
  jobs:
    - job:
      displayName: Approve
      pool: server
      steps:
        - task: ManualValidation@0
          inputs:
            notifyUsers: 'adam.kadzban@relativity.com'
            instructions: 'Hey go approve the deployment'
            onTimeout: reject

    - job:
      displayName: Swap
      pool:
        vmImage: $(vmImageName)
      steps:
        - task: AzureAppServiceManage@0
          inputs:
            azureSubscription: '$(azureSubscription)'
            Action: 'Swap Slots'
            WebAppName: '$(functionAppName)'
            ResourceGroupName: 'AzureFunction2'
            SourceSlot: 'stage'
            SwapWithProduction: true